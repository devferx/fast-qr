---
import MainLayout from '@/layouts/MainLayout.astro'
import QRExample from '@/assets/qr-example.png'
import { Image } from 'astro:assets'
---

<MainLayout title="Generate QR Code">
  <section class="mx-auto mt-3 grid max-w-screen-lg gap-3 px-5 sm:grid-cols-2">
    <div>
      <h1 class="text-xl font-bold">Generate a QR</h1>
      <form id="form-qr" class="flex flex-col gap-3">
        <div class="flex flex-col gap-1">
          <label class="text-sm" for="text">Text | URL</label>
          <input
            class="w-full rounded-md border border-slate-300 p-2"
            type="text"
            name="text"
            id="text"
            placeholder="Enter text or URL"
            required
          />
        </div>
        <button
          class="w-full rounded-md border border-transparent bg-[#F59E0B] p-2 text-white"
          type="submit">Generate</button
        >
      </form>

      <img
        class="mx-auto mt-3 h-[350px]"
        src="/assets/vectors/hero-create.svg"
        alt="Create"
      />
    </div>

    <div class="flex flex-col items-center justify-start gap-5 p-5">
      <div class="w-full max-w-[300px]" id="qr-code-container">
        <Image class="w-[300px] blur" src={QRExample} alt="QR Code" />
      </div>

      <div id="actions-container" class="grid hidden w-full grid-cols-2 gap-3">
        <button
          id="copy-svg-btn"
          class="w-full rounded-md border border-transparent bg-[#F59E0B] p-2 text-white"
        >
          Copy SVG
        </button>
        <button
          id="dowload-svg-btn"
          class="w-full rounded-md border border-transparent bg-[#F59E0B] p-2 text-white"
        >
          Download PNG
        </button>
      </div>
    </div>
  </section>

  <script>
    import QRCode from 'qrcode'

    const $qrCodeContainer = document.getElementById(
      'qr-code-container',
    ) as HTMLDivElement
    const $form = document.getElementById('form-qr') as HTMLFormElement

    const $actionsContainer = document.getElementById(
      'actions-container',
    ) as HTMLDivElement
    const $copySvgBtn = document.getElementById(
      'copy-svg-btn',
    ) as HTMLButtonElement
    const $downloadSvgBtn = document.getElementById(
      'dowload-svg-btn',
    ) as HTMLButtonElement

    const generateQrSVG = (text: string): Promise<string> => {
      return new Promise((resolve, reject) => {
        QRCode.toString(text, { type: 'svg', margin: 0 }, (error, string) => {
          if (error) {
            reject(error)
          } else {
            resolve(string)
          }
        })
      })
    }

    const getBlobBySvgString = (svgString: string) => {
      const svgBlob = new Blob([svgString], { type: 'image/svg+xml' })
      return svgBlob
    }

    $form.addEventListener('submit', async (event) => {
      event.preventDefault()

      const formData = new FormData($form)
      const text = formData.get('text') as string

      const svg = await generateQrSVG(text)

      document.startViewTransition(() => {
        $qrCodeContainer.innerHTML = `<div class="w-full max-w-[300px]">${svg}</div>`
        $actionsContainer.classList.remove('hidden')
      })
    })

    $downloadSvgBtn.addEventListener('click', () => {
      const svg = $qrCodeContainer.querySelector('svg')!
      const svgString = new XMLSerializer().serializeToString(svg)
      const blob = getBlobBySvgString(svgString)
      const url = URL.createObjectURL(blob)

      const a = document.createElement('a')
      a.href = url
      a.download = 'qr-code.svg'
      a.click()
    })

    $copySvgBtn.addEventListener('click', async () => {
      const svg = $qrCodeContainer.querySelector('svg')!
      const svgString = new XMLSerializer().serializeToString(svg)

      await navigator.clipboard.writeText(svgString)
      alert('SVG copied to clipboard')
    })
  </script>
</MainLayout>
